require("../config/config").config("bf");
const { addCatToProduct } = require("../products/addCatToProduct");
/**
 * issue with this script is that its prematurely returning an empty array and not the expected output from promise allsettled
 */
const productIds = [
  { ID: 4011 },
  { ID: 4013 },
  { ID: 4195 },
  { ID: 4196 },
  { ID: 4713 },
  { ID: 5256 },
  { ID: 5257 },
  { ID: 5258 },
  { ID: 5259 },
  { ID: 4703 },
  { ID: 4706 },
  { ID: 3328 },
  { ID: 3331 },
  { ID: 4193 },
  { ID: 4025 },
  { ID: 4026 },
  { ID: 5118 },
  { ID: 5119 },
  { ID: 5120 },
  { ID: 5121 },
  { ID: 5126 },
  { ID: 4435 },
  { ID: 4433 },
  { ID: 4422 },
  { ID: 3581 },
  { ID: 3582 },
  { ID: 4155 },
  { ID: 4172 },
  { ID: 4174 },
  { ID: 4175 },
  { ID: 4176 },
  { ID: 4813 },
  { ID: 5133 },
  { ID: 3516 },
  { ID: 3588 },
  { ID: 4033 },
  { ID: 4034 },
  { ID: 5214 },
  { ID: 3471 },
  { ID: 3472 },
  { ID: 4401 },
  { ID: 4402 },
  { ID: 4403 },
  { ID: 3625 },
  { ID: 4928 },
  { ID: 4929 },
  { ID: 4509 },
  { ID: 3506 },
  { ID: 3507 },
  { ID: 4507 },
  { ID: 5243 },
  { ID: 5031 },
  { ID: 5032 },
  { ID: 5033 },
  { ID: 5034 },
  { ID: 5035 },
  { ID: 5038 },
  { ID: 5039 },
  { ID: 5040 },
  { ID: 5041 },
  { ID: 5042 },
  { ID: 5043 },
  { ID: 4406 },
  { ID: 3852 },
  { ID: 5188 },
  { ID: 4036 },
  { ID: 4040 },
  { ID: 4333 },
  { ID: 4407 },
  { ID: 4412 },
  { ID: 4409 },
  { ID: 4408 },
  { ID: 4411 },
  { ID: 4410 },
  { ID: 222 },
  { ID: 4628 },
  { ID: 4588 },
  { ID: 4039 },
  { ID: 2674 },
  { ID: 2984 },
  { ID: 3074 },
  { ID: 3075 },
  { ID: 3076 },
  { ID: 3546 },
  { ID: 4807 },
  { ID: 4808 },
  { ID: 5196 },
  { ID: 2058 },
  { ID: 599 },
  { ID: 600 },
  { ID: 598 },
  { ID: 247 },
  { ID: 1534 },
  { ID: 1772 },
  { ID: 4297 },
  { ID: 4298 },
  { ID: 4299 },
  { ID: 3511 },
  { ID: 3513 },
  { ID: 3514 },
  { ID: 3515 },
  { ID: 3509 },
  { ID: 3516 },
  { ID: 3551 },
  { ID: 721 },
  { ID: 722 },
  { ID: 723 },
  { ID: 724 },
  { ID: 725 },
  { ID: 726 },
  { ID: 3575 },
  { ID: 3576 },
  { ID: 3577 },
  { ID: 4743 },
  { ID: 3580 },
  { ID: 4745 },
  { ID: 4819 },
  { ID: 2401 },
  { ID: 2829 },
  { ID: 2945 },
  { ID: 4161 },
  { ID: 4162 },
  { ID: 4163 },
  { ID: 5313 },
  { ID: 5314 },
  { ID: 5315 },
  { ID: 3260 },
  { ID: 3273 },
  { ID: 3276 },
  { ID: 5247 },
  { ID: 5248 },
  { ID: 5249 },
  { ID: 2677 },
  { ID: 2678 },
  { ID: 2679 },
  { ID: 2680 },
  { ID: 2682 },
  { ID: 3099 },
  { ID: 3100 },
  { ID: 3312 },
  { ID: 3313 },
  { ID: 3314 },
  { ID: 3828 },
  { ID: 3829 },
  { ID: 3830 },
  { ID: 4334 },
  { ID: 4529 },
  { ID: 4536 },
  { ID: 3996 },
  { ID: 4001 },
  { ID: 4241 },
  { ID: 4255 },
  { ID: 4264 },
  { ID: 4189 },
  { ID: 2489 },
  { ID: 4287 },
  { ID: 4289 },
  { ID: 4291 },
  { ID: 4292 },
];
// alfaparf products with shampoo mentioned in cat field

let catId = 514; // no cat id yet
/**
 * This needs to be tested before using
 * @param {object[]} productIds
 * @param {number} categoryId
 * @returns
 */
const addCategoryToSpecificProducts = (productIds, categoryId) =>
  new Promise((resolve, reject) => {
    if (!Array.isArray(productIds) || typeof categoryId !== "number")
      return reject("please check paramters");
    let promises = [];
    productIds.forEach((productId) => {
      let id = productId[Object.keys(productId)[0]];
      if (typeof id !== "number") return reject("product id must be a number");
      promises.push(addCatToProduct(id, categoryId));
    });
    Promise.allSettled(promises).then(resolve).catch(reject);
  });

addCategoryToSpecificProducts(productIds, catId)
  .then((res) => console.log("addCategoryToSpecificProducts response", res))
  .catch(console.log);
